// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  SUPERADMIN
}

enum ShoeStatus {
  NORMAL 
  DISCOUNT
  BESTSELLER
}

model User {
  id          Int       @id   @default(autoincrement())
  email       String    @unique
  name        String? 
  password    String
  role        Role      @default(USER)
  phone       String?
  avatarUrl   String?
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  address     Address[]
}

model Brand {
  id      Int     @id   @default(autoincrement())
  name    String
  imgUrl  String
  shoe    Shoe[]
}

model Category {
  id          Int     @id   @default(autoincrement())
  name        String
  imgUrl      String 
  shoe        Shoe[] 
  subcategory Subcategory[]
}

model Subcategory {
  id          Int       @id   @default(autoincrement())
  name        String
  shoe        Shoe[]
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
}

model Shoe {
  id            Int         @id   @default(autoincrement())
  name          String
  description   String
  price         Int
  weight        Int
  status        ShoeStatus  @default(NORMAL)
  shoeImage     ShoeImage[]
  stock         Stock[]
  brandId       Int
  categoryId    Int
  subcategoryId Int
  brand         Brand       @relation(fields: [brandId], references: [id])
  category      Category    @relation(fields: [categoryId], references: [id])
  subCategory   Subcategory @relation(fields: [subcategoryId], references: [id])
}

model ShoeImage {
  id      Int      @id   @default(autoincrement())
  imgUrl  String
  shoeId  Int
  shoe    Shoe    @relation(fields: [shoeId], references: [id], onDelete: Cascade)
}

model ShoeSize {
  id    Int   @id   @default(autoincrement())
  size  String
  stock Stock[]
}

model Stock {
  id            Int       @id   @default(autoincrement())
  stock         Int
  shoeId        Int
  sizeId        Int
  booked_stock  Int       @default(0)
  shoe          Shoe      @relation(fields: [shoeId], references: [id])
  size          ShoeSize  @relation(fields: [sizeId], references: [id])
}

model Province {
  province_id   String   @id  
  province      String @unique
  cities        City[]
}

model City {
  city_id       String       @id  
  city_name     String    
  province_id   String
  province      Province  @relation(fields: [province_id], references: [province_id], onDelete: Cascade)
  type          String
  postcal_code  String
  address       Address[]
}

model Address {
  id              Int     @id   @default(autoincrement())
  title           String
  name            String
  phone           String
  address         String
  addressDetails  String
  city_id          String
  city            City    @relation(fields: [city_id], references: [city_id])
  postcal_code    String
  latitude        Int
  longitude       Int
  isPrimary       Boolean
  userId          Int
  user            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}